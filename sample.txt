exports.signup = async (req, res) => {
  const { email, password } = req.body;
  try {
        // 1. Check if user already exists in auth.users
        const { data: existingUser, error: checkError } = await supabase
            .from("auth.users")
            .select("id")
            .eq("email", email)
            .single();

        if (checkError && checkError.code !== "PGRST116") {
            // Any error other than "no rows found"
            return res.status(500).json({ error: checkError.message });
        }

        if (existingUser) {
            return res.status(400).json({ error: "User already exists" });
        }

        // 2. Create new user
        const { data, error } = await supabase.auth.signUp({
            email,
            password
        });

        if (error) return res.status(400).json({ error: error.message });

        res.status(201).json({ message: "User registered successfully", user: data.user });

    } catch (err) {
        res.status(500).json({ error: err.message });
};




// const token = jwt.sign({ id: session.user.id, email: session.user.email }, process.env.JWT_SECRET, { expiresIn: '1d' });

  //Optionally, set as HTTP-only cookie:
  // res.cookie('token', token, { httpOnly: true });
  // const payload = {
  //       email: email,
  //     };
  // const jwtToken = jwt.sign(payload, "MY_SECRET_TOKEN");
  // return res.json({ message: 'Login success',jwt_token: jwtToken });